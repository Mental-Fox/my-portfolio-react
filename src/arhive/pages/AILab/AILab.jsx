import React, { useEffect, useRef, useState } from 'react';
import './AILab.css';

const AILab = () => {
    const canvasRef = useRef(null);
    const [input, setInput] = useState('');
    const [response, setResponse] = useState('');
    const [isTyping, setIsTyping] = useState(false);

    const aiResponses = {
        '–ø—Ä–∏–≤–µ—Ç': [
            '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!',
            '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π!',
            '–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!',
            '–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
            '–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç!',
        ],
        '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π': [
            '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!',
            '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å!',
            '–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ!',
        ],
        '—Ö–∞–π': [
            '–•–∞–π!',
            '–ò —Ç–µ–±–µ —Ö–∞–π!',
            '–ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?',
        ],
        'hello': [ // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–∞–ø–∏—à—É—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
            'Hello!',
            'Hi there!',
            'Greetings!',
        ],
        '–∫–∞–∫ –¥–µ–ª–∞': [
            '–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª!',
            '–†–∞–±–æ—Ç–∞—é –Ω–∞–¥ –Ω–æ–≤—ã–º–∏ –∏–¥–µ—è–º–∏, –≤—Å—ë —Å—É–ø–µ—Ä!',
            '–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ, –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º!',
        ],
        '–∫–∞–∫ —Ç—ã': [
            '–Ø –≤ –ø–æ—Ä—è–¥–∫–µ, —Å–ø–∞—Å–∏–±–æ!',
            '–í—Å—ë —Ö–æ—Ä–æ—à–æ, –≥–æ—Ç–æ–≤ –æ–±—â–∞—Ç—å—Å—è.',
            '–û—Ç–ª–∏—á–Ω–æ, –∑–∞—Ä—è–∂–µ–Ω –∑–Ω–∞–Ω–∏—è–º–∏!',
        ],
        '—á—Ç–æ –Ω–æ–≤–æ–≥–æ': [
            '–°–µ–≥–æ–¥–Ω—è —É–∑–Ω–∞–ª –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –æ –∫–≤–∞–Ω—Ç–æ–≤–æ–π —Ñ–∏–∑–∏–∫–µ!',
            '–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é –Ω–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –¥–ª—è –±–æ–ª–µ–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.',
            '–ú–∏—Ä –Ω–µ —Å—Ç–æ–∏—Ç –Ω–∞ –º–µ—Å—Ç–µ, –∏ —è –≤–º–µ—Å—Ç–µ —Å –Ω–∏–º!',
        ],
        '—Ä–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É': [
            '–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 == Dec 25!',
            '–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä, –∫–æ–≥–¥–∞ –µ–º—É —Ö–æ–ª–æ–¥–Ω–æ? - –ù—É–∂–Ω–∞ —Ñ–æ—Ä—Ç–æ—á–∫–∞ (window)!',
            '–ö–∞–∫ –Ω–∞–∑—ã–≤–∞—é—Ç –≥—Ä—É—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞? - Dis-assembler!',
        ],
        '–ø–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ': [
            '–ù–∞ –∫–∞–∫–æ–π —è–∑—ã–∫ –º–Ω–µ —ç—Ç–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏?',
            '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏.',
            '–Ø –º–æ–≥—É –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —è–∑—ã–∫–æ–≤, –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π!',
        ],
        '—á—Ç–æ —Ç–∞–∫–æ–µ': [
            (query) => {
                const term = query.toLowerCase().replace('—á—Ç–æ —Ç–∞–∫–æ–µ ', '');
                return `–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ "${term}". –ú–Ω–µ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –¥–∞—Ç—å —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç. –ú–æ–∂–µ—à—å —É—Ç–æ—á–Ω–∏—Ç—å?`;
            },
        ],
        '—Å–ø–∞—Å–∏–±–æ': [
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞!',
            '–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å!',
            '–û–±—Ä–∞—â–∞–π—Å—è –µ—â—ë!',
        ],
        '—Ç—ã —á–µ–ª–æ–≤–µ–∫': [
            '–Ø - –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –∏ –æ–±—â–∞—Ç—å—Å—è.',
            '–ù–µ—Ç, —è –Ω–µ —á–µ–ª–æ–≤–µ–∫, —è –ø—Ä–æ–≥—Ä–∞–º–º–∞.',
            '–Ø - —Ç–≤–æ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!',
        ],
        '—Ç—ã —Ä–æ–±–æ—Ç': [
            '–•–æ—Ç—è —É –º–µ–Ω—è –Ω–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ–ª–∞, –º–µ–Ω—è –º–æ–∂–Ω–æ –Ω–∞–∑–≤–∞—Ç—å —Å–≤–æ–µ–≥–æ —Ä–æ–¥–∞ "—Ä–æ–±–æ—Ç–æ–º" –≤ —Ü–∏—Ñ—Ä–æ–≤–æ–º –º–∏—Ä–µ.',
            '–Ø - –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ, –∞ –Ω–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π —Ä–æ–±–æ—Ç.',
            '–ú–æ–∂–Ω–æ –∏ —Ç–∞–∫ —Å–∫–∞–∑–∞—Ç—å, —è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞.',
        ],
        '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å –¥–µ–ª–∞—Ç—å': [
            '–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —è–∑—ã–∫–∏ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!',
            '–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞—Å—à–∏—Ä—è—é—Ç—Å—è. –°–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ —á–µ–º-–Ω–∏–±—É–¥—å!',
            '–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏.',
        ],
        '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è': [
            '–î–æ —Å–∫–æ—Ä–æ–π –≤—Å—Ç—Ä–µ—á–∏!',
            '–ü–æ–∫–∞-–ø–æ–∫–∞!',
            '–ë—É–¥—É —Ä–∞–¥ —Å–Ω–æ–≤–∞ –ø–æ–æ–±—â–∞—Ç—å—Å—è!',
        ],
        '–ø–æ–∫–∞': [
            '–£–¥–∞—á–∏!',
            '–°—á–∞—Å—Ç–ª–∏–≤–æ!',
            '–î–æ —Å–≤—è–∑–∏!',
        ],
        '–∫–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫': [
            () => {
                const today = new Date();
                const day = today.getDate();
                const month = today.getMonth() + 1;
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –ø–æ –¥–∞—Ç–µ
                return `–°–µ–≥–æ–¥–Ω—è ${day}.${month}. –ù–∞–¥–µ—é—Å—å, —É —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å! üéâ`;
            },
        ],
        '–∫–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–¥–∞': [
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –º–µ–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ–∫—É—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –≤ —Ç–≤–æ–µ–º —Ä–µ–≥–∏–æ–Ω–µ.',
            '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É, –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏–ª–∏ —Å–∞–π—Ç–∞–º–∏.',
        ],
    };

    const handleAskAI = async () => {
        if (!input.trim()) {
            setResponse('–≠–π, –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å, —è –∂–µ –Ω–µ —Ç–µ–ª–µ–ø–∞—Ç!');
            return;
        }

        setResponse('');
        setIsTyping(true);

        let responseText = '–ó–∞–¥—É–º–∞–ª—Å—è...'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const lowerInput = input.toLowerCase();

        for (const key in aiResponses) {
            if (lowerInput.includes(key)) {
                const possibleResponses = aiResponses[key];
                responseText = typeof possibleResponses === 'function'
                    ? possibleResponses(input)
                    : possibleResponses[Math.floor(Math.random() * possibleResponses.length)];
                break;
            }
        }

        // –ü–ª–∞–≤–Ω—ã–π –≤—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
        let index = 0;
        setResponse(responseText.charAt(0)); // –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ —Å—Ä–∞–∑—É
        index = 0; // –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å–æ –≤—Ç–æ—Ä–æ–π

        const typeText = () => {
            setResponse((prev) => prev + responseText.charAt(index));
            index++;
            if (index < responseText.length) {
                setTimeout(typeText, 20);
            } else {
                setIsTyping(false);
            }
        };

        setTimeout(typeText, 500);

        setInput(''); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ, –Ω–æ –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ lowerCase
    };

    useEffect(() => {
        const canvas = canvasRef.current;
        const ctx = canvas.getContext('2d');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        const particles = [];

        class Particle {
            constructor() {
                this.x = Math.random() * canvas.width;
                this.y = Math.random() * canvas.height;
                this.size = Math.random() * 5 + 1;
                this.speedX = Math.random() * 3 - 1.5;
                this.speedY = Math.random() * 3 - 1.5;
            }

            update() {
                this.x += this.speedX;
                this.y += this.speedY;
                if (this.size > 0.2) this.size -= 0.1;
                if (this.x < 0 || this.x > canvas.width) this.speedX *= -1;
                if (this.y < 0 || this.y > canvas.height) this.speedY *= -1;
            }

            draw() {
                ctx.fillStyle = 'rgba(0, 255, 136, 0.8)';
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                ctx.fill();
            }
        }

        const initParticles = () => {
            particles.length = 0; // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Å—Å–∏–≤ —á–∞—Å—Ç–∏—Ü
            for (let i = 0; i < 100; i++) {
                particles.push(new Particle());
            }
        };

        const connectParticles = () => {
            for (let i = 0; i < particles.length; i++) {
                for (let j = i + 1; j < particles.length; j++) {
                    const dx = particles[i].x - particles[j].x;
                    const dy = particles[i].y - particles[j].y;
                    const distance = Math.sqrt(dx * dx + dy * dy);
                    if (distance < 100) {
                        ctx.strokeStyle = `rgba(0, 255, 136, ${1 - distance / 1000})`;
                        ctx.lineWidth = 1;
                        ctx.beginPath();
                        ctx.moveTo(particles[i].x, particles[i].y);
                        ctx.lineTo(particles[j].x, particles[j].y);
                        ctx.stroke();
                    }
                }
            }
        };

        const animateParticles = () => {
            ctx.clearRect(0, 0, canvas.width, canvas.height); // –í–ê–ñ–ù–û: –æ—á–∏—â–∞–µ–º —Ö–æ–ª—Å—Ç
            particles.forEach((particle, index) => {
                particle.update();
                particle.draw();
                if (particle.size <= 0.2) {
                    particles.splice(index, 1);
                    particles.push(new Particle());
                }
            });
            connectParticles();
            requestAnimationFrame(animateParticles);
        };

        initParticles();
        animateParticles();

        const handleResize = () => {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            initParticles(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Å—Ç–∏—Ü—ã –∑–∞–Ω–æ–≤–æ
            // –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã–∑—ã–≤–∞—Ç—å animateParticles() –∑–¥–µ—Å—å,
            // —Ç–∞–∫ –∫–∞–∫ requestAnimationFrame —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω
        };

        window.addEventListener('resize', handleResize);

        return () => window.removeEventListener('resize', handleResize); // –í–ê–ñ–ù–û: —É–±–∏—Ä–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å
    }, []);


    return (
        <div className="ai section">
            <canvas ref={canvasRef}></canvas>
            <div className="ai-chat">
                <h1>AI –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è</h1>
                <p>–ü–æ–±–æ–ª—Ç–∞–π —Å –º–æ–∏–º –≤–µ—Å—ë–ª—ã–º –ò–ò!</p>
                <input
                    type="text"
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    placeholder="–°–ø—Ä–æ—Å–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å —Å–º–µ—à–Ω–æ–µ!"
                />
                <button onClick={handleAskAI}>–°–ø—Ä–æ—Å–∏—Ç—å</button>
                <div className="ai-response">
                    {isTyping ? '–ò–ò –ø–µ—á–∞—Ç–∞–µ—Ç...' : response}
                </div>
            </div>
        </div>
    );
};

export default AILab;